<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation=
               "http://www.springframework.org/schema/mvc
               http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
               http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context.xsd
               http://www.springframework.org/schema/aop
               http://www.springframework.org/schema/aop/spring-aop.xsd
               http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">
               
               

    <mvc:annotation-driven conversion-service="conversionService" validator="validator"></mvc:annotation-driven>
	
	<!-- <context:component-scan/>标签是告诉Spring 来扫描指定包下的类，
	并注册被@Component，@Controller，@Service，@Repository等注解标记的组件 -->
    <context:component-scan base-package="cn.songjhh.project.controller"></context:component-scan>
	
	<!-- 在原项目spring文件上新增的配置行 -->
	<!-- <mvc:annotation-scan/> -->
	
	<!-- 配置<mvc:default-servlet-handler />后，会在Spring MVC上下文中定义一个
	org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，
	它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，
	就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理 -->
    <mvc:default-servlet-handler/>
    
	<!-- <mvc:default-servlet-handler />将静态资源的处理经由Spring MVC框架交回Web应用服务器处理。
 	而<mvc:resources />更进一步，由Spring MVC框架自己处理静态资源，并添加一些有用的附加值功能。
	首先，<mvc:resources />允许静态资源放在任何地方，如WEB-INF目录下、类路径下等，
	 你甚至可以将JavaScript等静态文件打到JAR包中。通过location属性指定静态资源的位置，
	 由于location属性是Resources类型，因此可以使用诸如"classpath:"等的资源前缀指定资源位置。
	 传统Web容器的静态资源只能放在Web容器的根路径下，<mvc:resources />完全打破了这个限制。 
	其次，<mvc:resources />依据当前著名的Page Speed、YSlow等浏览器优化原则对静态资源提供优化。
	你可以通过cacheSeconds属性指定静态资源在浏览器端的缓存时间，一般可将该时间设置为一年，
	以充分利用浏览器端的缓存。在输出静态资源时，会根据配置设置好响应报文头的Expires 和 Cache-Control值。 
	在接收到静态资源的获取请求时，会检查请求头的Last-Modified值，
	如果静态资源没有发生变化，则直接返回303相应状态码，提示客户端使用浏览器缓存的数据，
	而非将静态资源的内容输出到客户端，以充分节省带宽，提高程序性能。 -->
    <mvc:resources location="/" mapping="/**/*.css"/>
    <mvc:resources location="/" mapping="/**/*.js"/>
    <mvc:resources location="/" mapping="/**/*.jsp"/>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--自定义参数绑定-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!--转换器-->
        <property name="converters">
            <!--<list>-->
            <!--日期类型转换-->
            <bean class="cn.songjhh.project.controller.converter.CustomDataConverter"/>
            <!--</list>-->
        </property>
    </bean>

    <!--检验器-->
    <bean id="validator"
          class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <!-- 校验器-->
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
        <!-- 指定校验使用的资源文件，再文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource" />
    </bean>

    <!-- 校验错误信息配置文件 -->
    <bean id="messageSource"
          class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <!-- 资源文件名-->
        <property name="basenames">
            <list>
                <value>classpath:CustomValidationMessages</value>
            </list>
        </property>
        <!-- 资源文件编码格式 -->
        <property name="fileEncodings" value="utf-8" />
        <!-- 对资源文件内容缓存时间，单位秒 -->
        <property name="cacheSeconds" value="120" />
    </bean>

    <!--全局异常处理器1-->
    <bean class="cn.songjhh.project.exception.CustomExceptionResolver"></bean>

    <!--全局异常处理器2-->
<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        &lt;!&ndash; 定义默认的异常处理页面，当该异常类型的注册时使用 &ndash;&gt;
        <property name="defaultErrorView" value="error"></property>
        &lt;!&ndash; 定义异常处理页面用来获取异常信息的变量名，默认名为exception &ndash;&gt;
        <property name="exceptionAttribute" value="ex"></property>
        &lt;!&ndash; 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 &ndash;&gt;
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">/403</prop>
                <prop key="org.apache.shiro.authz.UnauthenticatedException">/error</prop>
                <prop key="IOException">/eroro</prop>
            </props>
        </property>
    </bean>-->

    <!-- 文件上传 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置上传文件的最大尺寸为5MB -->
        <property name="maxUploadSize">
            <value>5242880</value>
        </property>
    </bean>

    <!-- 开启shiro注解-->
    <aop:config proxy-target-class="true"></aop:config>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
</beans>